"""PratyObj Write/Read Script V1.0 (POWeRS)"""
import pickle
from os import getcwd


ver_str = "{PratyObj1.0}"
color_ops = ["+", "-", "*", "/", "a", "b"]
development = False      # Please turn development off in this script as well as the main script to use this individually


class PowersException(BaseException):
    pass


def get_additional_keys():
    return {"background": (0, 0, 0), "foreground": (1.0, 1.0, 1.0), "operation": "*", "author": "Pratyush"}


def get_additional_validators():
    return {"background": lambda x: type(x) == tuple and len(x) == 3 and max(x) <= 1 and min(x) >= 0,
            "foreground": lambda x: type(x) == tuple and len(x) == 3 and max(x) <= 1 and min(x) >= 0,
            "operation": lambda x: x in color_ops,
            "author": lambda x: type(x) == str}


def read(filename):
    with open(f"{getcwd()}\\code\\pratyush\\{filename}.pratyobj"
              if not development else
              f"{getcwd()}\\{filename}.pratyobj", "rb") as file:
        data = pickle.load(file)
    if not data["ver"] == ver_str:
        raise PowersException
    additional = get_additional_keys()
    validators = get_additional_validators()
    returnable = {"ver": ver_str, "tris": data["tris"]}
    for info in additional:
        if not (info in data.keys() and validators[info](data[info])):
            raise PowersException
        returnable[info] = data[info]
    return returnable


def get_everything():
    for i in tris:
        for j in i:
            for k in j:
                yield k
        yield " "


def write(filename: str, tris: list, **kwargs):
    """Writes a PratyObj into a '<filename>.pratyobj' file, with triangle data: 'data' and additional information
    (background color, foreground color, color blend operation, etc.)"""
    filename += ".pratyobj"
    data = {"ver": ver_str, **get_additional_keys()}
    additional = get_additional_keys()
    validators = get_additional_validators()
    for info in additional:
        val = additional[info]
        if info in kwargs.keys() and validators[info](kwargs[info]):
            data[info] = kwargs[info]
        else:
            print(f"Argument received for {info} was either not existent or was invalid. Writing default value..")
            data[info] = additional[info]
    data["tris"] = tris
    with open(filename, "wb") as file:
        pickle.dump(data, file)


if __name__ == '__main__':
    # Running this program will convert ReDimension Coordinate Output to a list
    """old_tris = [[(26, 26, 26), (369, 219), (499, 228), (438, 212)],
            [(97, 97, 97), (409, 348), (369, 219), (372, 295)],
            [(26, 26, 26), (369, 219), (410, 242), (499, 228)],
            [(194, 194, 194), (410, 242), (489, 317), (499, 228)],
            [(97, 97, 97), (409, 348), (410, 242), (369, 219)],
            [(194, 194, 194), (410, 242), (409, 348), (489, 317)]]
    tris = []
    for tri in old_tris:
        tri[0] = tuple(map(lambda x: x / 255, tri[0]))
        tris.append(tri)"""
    tris = [
        [(0.5919886658853902, 0.5919886658853902, 0.5919886658853902), (377, 203), (388, 211), (379, 203)],
        [(0.5409547949140202, 0.5409547949140202, 0.5409547949140202), (377, 203), (379, 203), (368, 192)],
        [(0.7349741977752937, 0.7349741977752937, 0.7349741977752937), (403, 216), (394, 211), (388, 211)],
        [(0.7931631622237364, 0.7931631622237364, 0.7931631622237364), (420, 217), (411, 214), (403, 216)],
        [(0.6795586639614184, 0.6795586639614184, 0.6795586639614184), (435, 212), (448, 204), (444, 204)],
        [(0.3716251919018478, 0.3716251919018478, 0.3716251919018478), (362, 179), (368, 192), (363, 178)],
        [(0.7810281393740798, 0.7810281393740798, 0.7810281393740798), (435, 212), (429, 211), (420, 217)],
        [(0.7236474443963108, 0.7236474443963108, 0.7236474443963108), (388, 211), (394, 211), (379, 203)],
        [(0.27660182712218917, 0.27660182712218917, 0.27660182712218917), (359, 164), (362, 179), (363, 178)],
        [(0.6475355976522902, 0.6475355976522902, 0.6475355976522902), (448, 204), (457, 193), (444, 204)],
        [(0.8227917327537124, 0.8227917327537124, 0.8227917327537124), (403, 216), (411, 214), (394, 211)],
        [(0.8463340404398078, 0.8463340404398078, 0.8463340404398078), (420, 217), (429, 211), (411, 214)],
        [(0.7920761975943869, 0.7920761975943869, 0.7920761975943869), (435, 212), (444, 204), (429, 211)],
        [(0.6177170117098704, 0.6177170117098704, 0.6177170117098704), (368, 192), (379, 203), (371, 189)],
        [(0.1, 0.1, 0.1), (362, 150), (361, 150), (359, 164)],
        [(0.5336421099034347, 0.5336421099034347, 0.5336421099034347), (368, 192), (371, 189), (363, 178)],
        [(0.5059276818709124, 0.5059276818709124, 0.5059276818709124), (464, 179), (462, 178), (457, 193)],
        [(0.1, 0.1, 0.1), (366, 135), (361, 150), (362, 150)],
        [(0.32882892802568836, 0.32882892802568836, 0.32882892802568836), (359, 164), (363, 178), (362, 164)],
        [(0.8001226841232613, 0.8001226841232613, 0.8001226841232613), (379, 203), (394, 211), (386, 200)],
        [(0.4183004343743245, 0.4183004343743245, 0.4183004343743245), (464, 179), (467, 164), (462, 178)],
        [(0.232603644274198, 0.232603644274198, 0.232603644274198), (362, 150), (359, 164), (362, 164)],
        [(0.7241326741860556, 0.7241326741860556, 0.7241326741860556), (444, 204), (457, 193), (452, 190)],
        [(0.9018197899667402, 0.9018197899667402, 0.9018197899667402), (411, 214), (402, 206), (394, 211)],
        [(0.7489724047280458, 0.7489724047280458, 0.7489724047280458), (379, 203), (386, 200), (371, 189)],
        [(0.1, 0.1, 0.1), (377, 122), (375, 123), (366, 135)],
        [(0.1, 0.1, 0.1), (377, 122), (387, 113), (375, 123)],
        [(0.9253990382990485, 0.9253990382990485, 0.9253990382990485), (429, 211), (419, 206), (411, 214)],
        [(0.8684464883543049, 0.8684464883543049, 0.8684464883543049), (429, 211), (444, 204), (436, 200)],
        [(0.24015511439917253, 0.24015511439917253, 0.24015511439917253), (467, 164), (466, 149), (464, 149)],
        [(0.6541182439374206, 0.6541182439374206, 0.6541182439374206), (457, 193), (462, 178), (452, 190)],
        [(0.5769924306376574, 0.5769924306376574, 0.5769924306376574), (363, 178), (371, 189), (368, 173)],
        [(0.8904930612269732, 0.8904930612269732, 0.8904930612269732), (394, 211), (402, 206), (386, 200)],
        [(0.49108672284403615, 0.49108672284403615, 0.49108672284403615), (363, 178), (368, 173), (362, 164)],
        [(0.14473184792310892, 0.14473184792310892, 0.14473184792310892), (466, 149), (460, 134), (464, 149)],
        [(0.11306432240406941, 0.11306432240406941, 0.11306432240406941), (370, 137), (366, 135), (362, 150)],
        [(0.9551200333573817, 0.9551200333573817, 0.9551200333573817), (411, 214), (419, 206), (402, 206)],
        [(0.46589604940560386, 0.46589604940560386, 0.46589604940560386), (467, 164), (463, 164), (462, 178)],
        [(0.8362687671513158, 0.8362687671513158, 0.8362687671513158), (444, 204), (452, 190), (436, 200)],
        [(0.9364472242329867, 0.9364472242329867, 0.9364472242329867), (429, 211), (436, 200), (419, 206)],
        [(0.1, 0.1, 0.1), (448, 120), (452, 122), (439, 112)], [(0.1, 0.1, 0.1), (460, 134), (452, 122), (448, 120)],
        [(0.1, 0.1, 0.1), (370, 137), (377, 122), (366, 135)],
        [(0.3353913383311687, 0.3353913383311687, 0.3353913383311687), (367, 154), (362, 150), (362, 164)],
        [(0.1, 0.1, 0.1), (403, 107), (387, 113), (393, 112)],
        [(0.3696719232235244, 0.3696719232235244, 0.3696719232235244), (467, 164), (464, 149), (463, 164)],
        [(0.1, 0.1, 0.1), (393, 112), (387, 113), (377, 122)],
        [(0.7924625351028689, 0.7924625351028689, 0.7924625351028689), (371, 189), (386, 200), (380, 183)],
        [(0.49514072997584413, 0.49514072997584413, 0.49514072997584413), (368, 173), (367, 154), (362, 164)],
        [(0.7086623848234859, 0.7086623848234859, 0.7086623848234859), (371, 189), (380, 183), (368, 173)],
        [(0.2887491512359496, 0.2887491512359496, 0.2887491512359496), (367, 154), (370, 137), (362, 150)],
        [(0.1, 0.1, 0.1), (422, 106), (403, 107), (412, 109)],
        [(0.1, 0.1, 0.1), (439, 112), (422, 106), (432, 111)],
        [(0.6930571084264706, 0.6930571084264706, 0.6930571084264706), (452, 190), (462, 178), (456, 173)],
        [(0.6143077313203539, 0.6143077313203539, 0.6143077313203539), (462, 178), (463, 164), (456, 173)],
        [(0.9341198078599766, 0.9341198078599766, 0.9341198078599766), (386, 200), (402, 206), (395, 192)],
        [(0.23353762703937392, 0.23353762703937392, 0.23353762703937392), (464, 149), (460, 134), (455, 136)],
        [(0.9851592839114595, 0.9851592839114595, 0.9851592839114595), (419, 206), (410, 197), (402, 206)],
        [(0.1, 0.1, 0.1), (448, 120), (439, 112), (432, 111)],
        [(0.1, 0.1, 0.1), (412, 109), (403, 107), (393, 112)],
        [(0.14825830846176116, 0.14825830846176116, 0.14825830846176116), (455, 136), (460, 134), (448, 120)],
        [(0.8753403477996797, 0.8753403477996797, 0.8753403477996797), (436, 200), (452, 190), (442, 183)],
        [(0.975603897630893, 0.975603897630893, 0.975603897630893), (419, 206), (436, 200), (426, 192)],
        [(0.8828209292192066, 0.8828209292192066, 0.8828209292192066), (386, 200), (395, 192), (380, 183)],
        [(0.1, 0.1, 0.1), (432, 111), (422, 106), (412, 109)],
        [(0.14238999586238316, 0.14238999586238316, 0.14238999586238316), (384, 125), (377, 122), (370, 137)],
        [(0.4586107347940726, 0.4586107347940726, 0.4586107347940726), (463, 164), (464, 149), (457, 154)],
        [(0.1, 0.1, 0.1), (384, 125), (393, 112), (377, 122)],
        [(0.9738156714812609, 0.9738156714812609, 0.9738156714812609), (402, 206), (410, 197), (395, 192)],
        [(0.5845003154716226, 0.5845003154716226, 0.5845003154716226), (368, 173), (377, 163), (367, 154)],
        [(0.805562970360659, 0.805562970360659, 0.805562970360659), (452, 190), (456, 173), (442, 183)],
        [(0.9962240015320212, 0.9962240015320212, 0.9962240015320212), (419, 206), (426, 192), (410, 197)],
        [(0.7127102564700568, 0.7127102564700568, 0.7127102564700568), (380, 183), (377, 163), (368, 173)],
        [(0.6098026893606364, 0.6098026893606364, 0.6098026893606364), (463, 164), (457, 154), (456, 173)],
        [(0.40481326296785375, 0.40481326296785375, 0.40481326296785375), (457, 154), (464, 149), (455, 136)],
        [(0.3893504747136757, 0.3893504747136757, 0.3893504747136757), (379, 143), (370, 137), (367, 154)],
        [(0.9433509169916525, 0.9433509169916525, 0.9433509169916525), (436, 200), (442, 183), (426, 192)],
        [(0.12897745882842349, 0.12897745882842349, 0.12897745882842349), (439, 124), (448, 120), (432, 111)],
        [(0.3177001393503695, 0.3177001393503695, 0.3177001393503695), (379, 143), (384, 125), (370, 137)],
        [(0.1, 0.1, 0.1), (412, 109), (393, 112), (402, 117)],
        [(0.22967832714642114, 0.22967832714642114, 0.22967832714642114), (455, 136), (448, 120), (439, 124)],
        [(0.5488624330768442, 0.5488624330768442, 0.5488624330768442), (377, 163), (379, 143), (367, 154)],
        [(0.8868688660115633, 0.8868688660115633, 0.8868688660115633), (395, 192), (393, 174), (380, 183)],
        [(0.14986843672174036, 0.14986843672174036, 0.14986843672174036), (402, 117), (393, 112), (384, 125)],
        [(0.1, 0.1, 0.1), (432, 111), (412, 109), (421, 117)],
        [(0.977869696184101, 0.977869696184101, 0.977869696184101), (410, 197), (410, 183), (395, 192)],
        [(0.800566226695476, 0.800566226695476, 0.800566226695476), (380, 183), (393, 174), (377, 163)],
        [(0.801064760608667, 0.801064760608667, 0.801064760608667), (456, 173), (445, 163), (442, 183)],
        [(0.6847225823122719, 0.6847225823122719, 0.6847225823122719), (456, 173), (457, 154), (445, 163)],
        [(0.9917189831785003, 0.9917189831785003, 0.9917189831785003), (426, 192), (410, 183), (410, 197)],
        [(0.48624876946090856, 0.48624876946090856, 0.48624876946090856), (457, 154), (455, 136), (444, 142)],
        [(0.19581636376762163, 0.19581636376762163, 0.19581636376762163), (439, 124), (432, 111), (421, 117)],
        [(0.16843319703923956, 0.16843319703923956, 0.16843319703923956), (421, 117), (412, 109), (402, 117)],
        [(0.9388528085086548, 0.9388528085086548, 0.9388528085086548), (442, 183), (428, 174), (426, 192)],
        [(0.9416256854247702, 0.9416256854247702, 0.9416256854247702), (395, 192), (410, 183), (393, 174)],
        [(0.40057619918867254, 0.40057619918867254, 0.40057619918867254), (444, 142), (455, 136), (439, 124)],
        [(0.40731313092961113, 0.40731313092961113, 0.40731313092961113), (395, 132), (384, 125), (379, 143)],
        [(0.9672650523894922, 0.9672650523894922, 0.9672650523894922), (426, 192), (428, 174), (410, 183)],
        [(0.3255814513078333, 0.3255814513078333, 0.3255814513078333), (395, 132), (402, 117), (384, 125)],
        [(0.6372158356090596, 0.6372158356090596, 0.6372158356090596), (457, 154), (444, 142), (445, 163)],
        [(0.6369753856118292, 0.6369753856118292, 0.6369753856118292), (377, 163), (393, 152), (379, 143)],
        [(0.8663397083466602, 0.8663397083466602, 0.8663397083466602), (442, 183), (445, 163), (428, 174)],
        [(0.7647684879200287, 0.7647684879200287, 0.7647684879200287), (393, 174), (393, 152), (377, 163)],
        [(0.3002941033622098, 0.3002941033622098, 0.3002941033622098), (421, 117), (402, 117), (411, 126)],
        [(0.367063445098201, 0.367063445098201, 0.367063445098201), (427, 132), (439, 124), (421, 117)],
        [(0.5668249758632771, 0.5668249758632771, 0.5668249758632771), (393, 152), (395, 132), (379, 143)],
        [(0.9057112290944315, 0.9057112290944315, 0.9057112290944315), (410, 183), (410, 163), (393, 174)],
        [(0.4678406383012793, 0.4678406383012793, 0.4678406383012793), (444, 142), (439, 124), (427, 132)],
        [(0.38517890766111096, 0.38517890766111096, 0.38517890766111096), (411, 126), (402, 117), (395, 132)],
        [(0.9195399626583958, 0.9195399626583958, 0.9195399626583958), (428, 174), (410, 163), (410, 183)],
        [(0.7027474085998957, 0.7027474085998957, 0.7027474085998957), (445, 163), (444, 142), (428, 151)],
        [(0.8187226143346308, 0.8187226143346308, 0.8187226143346308), (445, 163), (428, 151), (428, 174)],
        [(0.819379222796123, 0.819379222796123, 0.819379222796123), (393, 174), (410, 163), (393, 152)],
        [(0.4075853574897027, 0.4075853574897027, 0.4075853574897027), (427, 132), (421, 117), (411, 126)],
        [(0.6188077657890841, 0.6188077657890841, 0.6188077657890841), (444, 142), (427, 132), (428, 151)],
        [(0.6213338353861879, 0.6213338353861879, 0.6213338353861879), (393, 152), (411, 142), (395, 132)],
        [(0.8470574508215608, 0.8470574508215608, 0.8470574508215608), (428, 174), (428, 151), (410, 163)],
        [(0.5449293701720509, 0.5449293701720509, 0.5449293701720509), (411, 142), (411, 126), (395, 132)],
        [(0.5587786420683871, 0.5587786420683871, 0.5587786420683871), (427, 132), (411, 126), (411, 142)],
        [(0.7495156313677477, 0.7495156313677477, 0.7495156313677477), (410, 163), (411, 142), (393, 152)],
        [(0.6469720354598308, 0.6469720354598308, 0.6469720354598308), (428, 151), (427, 132), (411, 142)],
        [(0.7633443928182395, 0.7633443928182395, 0.7633443928182395), (428, 151), (411, 142), (410, 163)]
    ]

    write("sphere", tris)
    print(read("sphere"))

# print(" ".join([str(i) for i in get_everything()]))
